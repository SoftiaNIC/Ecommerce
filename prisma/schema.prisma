// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENTE
  ADMIN
  SUPERADMIN
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String  @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(CLIENTE)
  password      String   // Campo para almacenar el hash de la contraseña

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  products      Product[] // Productos creados por el usuario (si es admin)
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?  
  expires_at        Int?     
  token_type        String?  
  scope             String?  
  id_token          String?  
  session_state     String?  

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  category    String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)  // Para soft delete
  featured    Boolean  @default(false) // Para productos destacados
  
  // Información adicional
  materials   String?  // Materiales utilizados
  dimensions  String?  // Dimensiones del producto
  weight      String?  // Peso del producto
  careInstructions String? // Instrucciones de cuidado
  
  // Relaciones
  createdBy   String?
  creator     User?    @relation(fields: [createdBy], references: [id])
  images      ProductImage[]
  clicks      ProductClick[]
  popularity  PopularityMetric?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String?  // Para compatibilidad con imágenes existentes
  altText   String?
  isMain    Boolean  @default(false) // Imagen principal del producto
  order     Int      @default(0)     // Orden de las imágenes
  
  // Campos para almacenar imagen como BLOB
  imageData Bytes?   // Datos binarios de la imagen
  mimeType  String?  // Tipo MIME (image/jpeg, image/png, etc.)
  filename  String?  // Nombre original del archivo
  fileSize  Int?     // Tamaño del archivo en bytes
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nuevo modelo para imágenes de categorías de la landing page
model CategoryImage {
  id          String   @id @default(uuid())
  name        String   @unique // Nombre de la categoría (amigurumis, mantas, etc.)
  altText     String?
  
  // Datos de la imagen como BLOB
  imageData   Bytes    // Datos binarios de la imagen
  mimeType    String   // Tipo MIME
  filename    String   // Nombre original del archivo
  fileSize    Int      // Tamaño del archivo en bytes
  
  isActive    Boolean  @default(true)
  order       Int      @default(0) // Para ordenar las categorías
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductClick {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Información del click
  userAgent String?
  ipAddress String?
  referrer  String?
  clickType String   @default("view") // "view", "whatsapp", "favorite"
  
  // Información temporal para analytics
  year      Int
  month     Int
  week      Int
  day       Int
  hour      Int
  
  createdAt DateTime @default(now())
  
  @@index([productId, createdAt])
  @@index([year, month])
  @@index([clickType])
}

model PopularityMetric {
  id        String   @id @default(uuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Contadores por período
  totalClicks     Int @default(0)
  weeklyClicks    Int @default(0)
  monthlyClicks   Int @default(0)
  yearlyClicks    Int @default(0)
  
  // Contadores por tipo
  viewClicks      Int @default(0)
  whatsappClicks  Int @default(0)
  favoriteClicks  Int @default(0)
  
  // Score de popularidad calculado
  popularityScore Float @default(0)
  
  // Última actualización de métricas
  lastCalculated  DateTime @default(now())
  updatedAt       DateTime @updatedAt
}